{"version":3,"sources":["reportWebVitals.ts","pages/home.tsx","components/navbar.tsx","pages/archive.tsx","pages/about.tsx","components/footer.tsx","pages/article.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Home","useState","archiveList","setArchiveList","useEffect","fetch","process","ret","json","obj","className","slice","map","latestArticleMetadata","idx","to","filename","title","preamble","Navbar","path","page","Archive","articleMetadata","articleDate","Date","timestamp","toISOString","split","About","Footer","Article","params","useParams","articleContent","setArticleContent","res","text","content","children","Main","basename","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3f1d3fa.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useState, useEffect } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { articleMetaData } from \"./archive\"\n\nimport \"./home.css\"\n\n// This is a quick and dirty way to store all of our articles and associated metadata\nconst DATABASE = process.env.PUBLIC_URL + \"/articles/articleMetaData.json\"\n\nexport default function Home() {\n    const [ archiveList, setArchiveList ] = useState<articleMetaData[]>([])\n\n    useEffect(() => {\n        fetch(DATABASE)\n            .then(ret => ret.json())\n            .then(obj => setArchiveList(obj))\n    }, [])\n\n    return (\n        <div className='Home'>\n            <div className=\"Featured\">\n                {\n                    archiveList.slice(0, 4).map((latestArticleMetadata, idx) => {\n                        return (\n                            <Link className=\"FeaturedItem\" to={\"/article/\" + latestArticleMetadata.filename}>\n                                <div>\n                                    <h2>{latestArticleMetadata.title}</h2>\n                                    <p>{latestArticleMetadata.preamble}</p>\n                                </div>\n                            </Link>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}","import {  Link  } from \"react-router-dom\";\n\nimport \"./navbar.css\"\n\nexport default function Navbar() {\n    let pages = [\n        {\n            path: \"/\",\n            page: \"Home\"\n        },\n        {\n            path: \"/archive\",\n            page: \"Archive\"\n        },\n        {\n            path: \"/about\",\n            page: \"About\"\n        }\n    ]\n    return (\n        <div className=\"Navbar\">\n            <div>\n                {pages.map((page) => {\n                    return (\n                        <Link to={page.path} className=\"SectionLink\">\n                            <h2>{page.page}</h2>\n                        </Link>\n                    )\n                })}\n            </div>\n            <div className=\"Geo\">\n                <h2>GeoBlog</h2>\n            </div>\n        </div>\n    )\n}","import { useEffect, useState } from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport \"./archive.css\"\n\n// This is a quick and dirty way to store all of our articles and associated metadata\nconst DATABASE = process.env.PUBLIC_URL + \"/articles/articleMetaData.json\"\n\nexport type articleMetaData = {\n    filename: string,\n    author: string,\n    timestamp: number,\n    title: string,\n    preamble: string\n}\n\nexport default function Archive() {\n    const [ archiveList, setArchiveList ] = useState<articleMetaData[]>([])\n\n    useEffect(() => {\n        fetch(DATABASE)\n            .then(ret => ret.json())\n            .then(obj => setArchiveList(obj))\n    }, [])\n\n    return (\n        <div className='archive'>\n            <div className=\"archiveList\">\n                {archiveList.map((articleMetadata) => {\n                    let articleDate = new Date(articleMetadata.timestamp)\n                    return (\n                        <div className=\"archiveItem\">\n                            <Link to={\"/article/\" + articleMetadata.filename}>\n                                <p>{articleMetadata.title}</p>\n                                <p>{articleDate.toISOString().split(\"T\")[0]}</p>\n                            </Link>\n                            <div></div>\n                        </div>\n                    )\n                })}\n            </div>\n        </div>\n    )\n};","export default function About() {\n    return (\n        <div>\n            <h1>About</h1>\n        </div>\n    )\n};","\nimport \"./footer.css\"\n\nexport default function Footer() {\n    return (\n        <footer className=\"Footer\">\n            <h3>Site is currently under construction</h3>\n        </footer>\n    )\n}","import ReactMarkdown from \"react-markdown\"\nimport { useParams } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\n\nimport \"./article.css\"\n\nconst ARTICLES_DIR = process.env.PUBLIC_URL + \"/articles/\"\n\nexport default function Article() {\n    const params = useParams()\n    const [ articleContent, setArticleContent ] = useState(\"\")\n\n    // Grab the content for the article as a markdown string\n    useEffect(() => {\n        fetch(ARTICLES_DIR + params.title)\n            .then((res) => res.text())\n            .then(content => setArticleContent(content))\n    }, [params])\n\n    // Pass that to ReactMarkdown which renders it as HTML / react component\n    return (\n        <div className=\"Article\">\n            <ReactMarkdown className=\"Markdown\" children={articleContent}/>\n        </div>\n    )\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport { Routes, Route, BrowserRouter } from \"react-router-dom\"\n\nimport Home from \"./pages/home\";\nimport Navbar from \"./components/navbar\";\nimport Archive from './pages/archive';\nimport About from './pages/about';\nimport Footer from './components/footer';\nimport Article from './pages/article';\n\nimport \"./index.css\"\n\nfunction Main() {\n  return (\n    <div className=\"Main\">\n      <div className=\"Content\">\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\n          <Navbar />\n          <Routes>\n            <Route path='/' element={<Home />} />\n            <Route path='/archive' element={<Archive />} />\n            <Route path='/about' element={<About />} />\n            <Route path='/article/:title' element={<Article />} />\n          </Routes>\n        </BrowserRouter>\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nReactDOM.render(\n    <Main />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}