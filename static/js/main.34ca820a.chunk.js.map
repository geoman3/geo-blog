{"version":3,"sources":["reportWebVitals.ts","pages/home.tsx","components/navbar.tsx","pages/archive.tsx","pages/about.tsx","components/footer.tsx","pages/article.jsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Home","useState","archiveList","setArchiveList","useEffect","fetch","process","ret","json","obj","className","slice","map","latestArticleMetadata","idx","to","filename","title","preamble","Navbar","path","page","Archive","articleMetadata","articleDate","Date","timestamp","toISOString","split","About","Footer","Article","params","useParams","articleContent","setArticleContent","res","text","content","children","transformImageUri","uri","components","code","node","inline","props","match","exec","String","replace","style","tomorrow","language","PreTag","Main","basename","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34ca820a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { useState, useEffect } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { articleMetaData } from \"./archive\"\r\n\r\nimport \"./home.css\"\r\n\r\n// This is a quick and dirty way to store all of our articles and associated metadata\r\nconst DATABASE = process.env.PUBLIC_URL + \"/articles/articleMetaData.json\"\r\n\r\nexport default function Home() {\r\n    const [ archiveList, setArchiveList ] = useState<articleMetaData[]>([])\r\n\r\n    useEffect(() => {\r\n        fetch(DATABASE)\r\n            .then(ret => ret.json())\r\n            .then(obj => setArchiveList(obj))\r\n    }, [])\r\n\r\n    return (\r\n        <div className='Home'>\r\n            <div className=\"Featured\">\r\n                {\r\n                    archiveList.slice(0, 4).map((latestArticleMetadata, idx) => {\r\n                        return (\r\n                            <Link className=\"FeaturedItem\" to={\"/article/\" + latestArticleMetadata.filename}>\r\n                                <div>\r\n                                    <h2>{latestArticleMetadata.title}</h2>\r\n                                    <p>{latestArticleMetadata.preamble}</p>\r\n                                </div>\r\n                            </Link>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import {  Link  } from \"react-router-dom\";\r\n\r\nimport \"./navbar.css\"\r\n\r\nexport default function Navbar() {\r\n    let pages = [\r\n        {\r\n            path: \"/\",\r\n            page: \"Home\"\r\n        },\r\n        {\r\n            path: \"/archive\",\r\n            page: \"Archive\"\r\n        },\r\n        {\r\n            path: \"/about\",\r\n            page: \"About\"\r\n        }\r\n    ]\r\n    return (\r\n        <div className=\"Navbar\">\r\n            <div>\r\n                {pages.map((page) => {\r\n                    return (\r\n                        <Link to={page.path} className=\"SectionLink\">\r\n                            <h2>{page.page}</h2>\r\n                        </Link>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div className=\"Geo\">\r\n                <h2>GeoBlog</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nimport \"./archive.css\"\r\n\r\n// This is a quick and dirty way to store all of our articles and associated metadata\r\nconst DATABASE = process.env.PUBLIC_URL + \"/articles/articleMetaData.json\"\r\n\r\nexport type articleMetaData = {\r\n    filename: string,\r\n    author: string,\r\n    timestamp: number,\r\n    title: string,\r\n    preamble: string\r\n}\r\n\r\nexport default function Archive() {\r\n    const [ archiveList, setArchiveList ] = useState<articleMetaData[]>([])\r\n\r\n    useEffect(() => {\r\n        fetch(DATABASE)\r\n            .then(ret => ret.json())\r\n            .then(obj => setArchiveList(obj))\r\n    }, [])\r\n\r\n    return (\r\n        <div className='archive'>\r\n            <div className=\"archiveList\">\r\n                {archiveList.map((articleMetadata) => {\r\n                    let articleDate = new Date(articleMetadata.timestamp)\r\n                    return (\r\n                        <div className=\"archiveItem\">\r\n                            <Link to={\"/article/\" + articleMetadata.filename}>\r\n                                <p>{articleMetadata.title}</p>\r\n                                <p>{articleDate.toISOString().split(\"T\")[0]}</p>\r\n                            </Link>\r\n                            <div></div>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n};","export default function About() {\r\n    return (\r\n        <div>\r\n            <h1>About</h1>\r\n        </div>\r\n    )\r\n};","\r\nimport \"./footer.css\"\r\n\r\nexport default function Footer() {\r\n    return (\r\n        <footer className=\"Footer\">\r\n            <h3>Site is currently under construction</h3>\r\n        </footer>\r\n    )\r\n}","import ReactMarkdown from \"react-markdown\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { useEffect, useState } from \"react\"\r\n\r\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\"\r\nimport { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\"\r\n\r\nimport \"./article.css\"\r\n\r\nconst ARTICLES_DIR = process.env.PUBLIC_URL + \"/articles/\"\r\n\r\nexport default function Article() {\r\n    const params = useParams()\r\n    const [ articleContent, setArticleContent ] = useState(\"\")\r\n\r\n    // Grab the content for the article as a markdown string\r\n    useEffect(() => {\r\n        fetch(ARTICLES_DIR + params.title)\r\n            .then((res) => res.text())\r\n            .then(content => setArticleContent(content))\r\n    }, [params])\r\n\r\n    // Pass that to ReactMarkdown which renders it as HTML / react component\r\n    return (\r\n        <div className=\"Article\">\r\n            <ReactMarkdown\r\n              className=\"Markdown\"\r\n              children={articleContent}\r\n              transformImageUri={(uri) => {\r\n                return `${process.env.PUBLIC_URL}${uri}`\r\n              }}\r\n              components={{\r\n                  code({node, inline, className, children, ...props}) {\r\n                    const match = /language-(\\w+)/.exec(className || '')\r\n                    return !inline && match ? (\r\n                      <SyntaxHighlighter\r\n                        children={String(children).replace(/\\n$/, '')}\r\n                        style={tomorrow}\r\n                        language={match[1]}\r\n                        PreTag=\"div\"\r\n                        {...props}\r\n                      />\r\n                    ) : (\r\n                      <code className={className} {...props}>\r\n                        {children}\r\n                      </code>\r\n                    )\r\n                  }\r\n                }}/>\r\n        </div>\r\n    )\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Routes, Route, HashRouter } from \"react-router-dom\"\r\n\r\nimport Home from \"./pages/home\";\r\nimport Navbar from \"./components/navbar\";\r\nimport Archive from './pages/archive';\r\nimport About from './pages/about';\r\nimport Footer from './components/footer';\r\nimport Article from './pages/article';\r\n\r\nimport \"./index.css\"\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"Main\">\r\n      <div className=\"Content\">\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n          <Navbar />\r\n          <Routes>\r\n            <Route path='/' element={<Home />} />\r\n            <Route path='/archive' element={<Archive />} />\r\n            <Route path='/about' element={<About />} />\r\n            <Route path='/article/:title' element={<Article />} />\r\n            {/* <Route path='/*' element={<Home />} /> */}\r\n          </Routes>\r\n        </HashRouter>\r\n      </div>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nReactDOM.render(\r\n    <Main />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}